/**
 * Image utility functions for handling external images and proxy URLs
 */

const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:8003';

/**
 * Generate proxy URL for external images to bypass CORS issues
 * @param {string} originalUrl - Original image URL
 * @returns {string} - Proxied image URL
 */
export const getProxyImageUrl = (originalUrl) => {
  if (!originalUrl || typeof originalUrl !== 'string') {
    return getPlaceholderImageUrl();
  }

  // If it's already a local URL, return as is
  if (originalUrl.startsWith('/') || originalUrl.includes(window.location.hostname)) {
    return originalUrl;
  }

  // For external URLs, use the proxy
  const encodedUrl = encodeURIComponent(originalUrl.trim());
  return `${API_BASE_URL}/images/proxy?url=${encodedUrl}`;
};

/**
 * Generate base64 encoded proxy URL for special characters
 * @param {string} originalUrl - Original image URL
 * @returns {string} - Base64 proxied image URL
 */
export const getBase64ProxyImageUrl = (originalUrl) => {
  if (!originalUrl || typeof originalUrl !== 'string') {
    return getPlaceholderImageUrl();
  }

  try {
    const base64Url = btoa(originalUrl.trim());
    return `${API_BASE_URL}/images/proxy-base64?url=${base64Url}`;
  } catch (error) {
    console.warn('Failed to encode URL to base64:', error);
    return getProxyImageUrl(originalUrl);
  }
};

/**
 * Get placeholder image URL for failed images
 * @param {string} text - Optional text to display
 * @returns {string} - Placeholder image URL
 */
export const getPlaceholderImageUrl = (text = 'Image Not Available') => {
  // Create SVG placeholder
  const svg = `
    <svg width="400" height="300" xmlns="http://www.w3.org/2000/svg">
      <rect width="100%" height="100%" fill="#f3f4f6"/>
      <text x="50%" y="45%" dominant-baseline="middle" text-anchor="middle" fill="#9ca3af" font-family="Arial, sans-serif" font-size="16">
        ${text}
      </text>
      <text x="50%" y="60%" dominant-baseline="middle" text-anchor="middle" fill="#9ca3af" font-family="Arial, sans-serif" font-size="24">
        ðŸ“·
      </text>
    </svg>
  `;
  
  return `data:image/svg+xml;base64,${btoa(svg)}`;
};

/**
 * Check if URL is from AliExpress or other external CDN
 * @param {string} url - Image URL
 * @returns {boolean} - True if external CDN
 */
export const isExternalCDN = (url) => {
  if (!url) return false;
  
  const externalDomains = [
    'alicdn.com',
    'ae01.alicdn.com',
    'ae02.alicdn.com',
    'ae03.alicdn.com',
    'ae04.alicdn.com',
    'alibaba.com',
    'aliexpress.com',
    'ebayimg.com',
    'ebaystatic.com',
    'amazon.com',
    'amazonclouddrive.com'
  ];
  
  return externalDomains.some(domain => url.includes(domain));
};

/**
 * Process image URL to use proxy if needed
 * @param {string} url - Original image URL
 * @param {boolean} forceProxy - Force using proxy even for local URLs
 * @returns {string} - Processed image URL
 */
export const processImageUrl = (url, forceProxy = false) => {
  if (!url) {
    return getPlaceholderImageUrl();
  }

  // If it's a data URL, return as is
  if (url.startsWith('data:')) {
    return url;
  }

  // If force proxy or external CDN, use proxy
  if (forceProxy || isExternalCDN(url)) {
    return getProxyImageUrl(url);
  }

  return url;
};

/**
 * Process multiple image URLs
 * @param {string[]} urls - Array of image URLs
 * @param {boolean} forceProxy - Force using proxy
 * @returns {string[]} - Array of processed URLs
 */
export const processImageUrls = (urls, forceProxy = false) => {
  if (!Array.isArray(urls)) {
    return [];
  }

  return urls
    .filter(url => url && typeof url === 'string')
    .map(url => processImageUrl(url, forceProxy));
};

/**
 * Preload images for better performance
 * @param {string[]} urls - Array of image URLs to preload
 */
export const preloadImages = (urls) => {
  if (!Array.isArray(urls)) return;

  urls.forEach(url => {
    if (url && typeof url === 'string') {
      const img = new Image();
      img.src = url;
    }
  });
};

/**
 * Image loading state hook data
 */
export const createImageState = () => ({
  loaded: false,
  error: false,
  loading: true
});

/**
 * Handle image load event
 * @param {Function} setState - State setter function
 */
export const handleImageLoad = (setState) => () => {
  setState({
    loaded: true,
    error: false,
    loading: false
  });
};

/**
 * Handle image error event
 * @param {Function} setState - State setter function
 */
export const handleImageError = (setState) => () => {
  setState({
    loaded: false,
    error: true,
    loading: false
  });
};